module LangEval where

import Types
import Lang
import Env
import Kripke
import System.Random

--Expression eval
eeval :: Expr -> ProgEnv -> Bool
eeval (Bin op e0 e1) env  = (eeval e0) `operate` (eeval e1)
                          where operate = opBool op
eeval (Not e) env =  not (eeval e)
eeval (Lit v) env = v
eeval (Ident n) env = getE n env

--Expression operators
opBool :: Op -> Bool -> Bool -> Bool
opBool And = (&)
opBool Or = (|)
opBool Xor = (/)
opBool Impl = (->)
opBool Iff = (<->)

--Auxiliary functions
evalGuards :: (Expr,Comm) -> OBDD AP -> Env -> (OBDD AP,Env)
evalGuards [] o e = (o,e) 
evalGuards (z:zs) o e = if (i==0) then ceval (snd z) o e
                                         else evalGuards zs o e

--Command eval
--takes a Lang program and makes an OBDD out of it
ceval :: Comm -> Kripke -> Env -> Int{-current state-} -> Int{-state number-} -> (Kripke,Env) 
ceval Skip m env s sn = (m,env) 
ceval (Assign n e) m env s sn = let x = eeval e env in if x then ((first m ++ [sn+1],
																  second m ++ (s,sn+1),
																  setL (sn+1,)(third m)),x) 
ceval (Seq c0 c1) obdd env s = let (x,y) = ceval c0 obdd env in ceval c1 x y
ceval (If xs) obdd env s = let ys = [ x | x <- xs, fst x == True] in 
                                evalRandomGuard ys obdd env                      
                                                                                

ceval (While e c) obdd env s = if eeval e env then ceval(Seq c (while e c)) obdd env
                                            else ceval Skip obdd env

ceval (New d c) obdd env s = let e = deval d env in ceval c (OBDD.or [obdd, (mkState e)]) (msetE e env)
ceval (PCall n ns) obdd env s = let v:vs = mgetE (n:ns) env in (snd v) obdd vs

--Declaration eval
deval :: Decl -> Env -> Env
deval (DVar n e) env = [(n,eeval e env)]

deval (DSeq d0 d1) env = let x = deval d0 env in x ++ deval d1 (msetE x env)
deval (DProc n ns c) env = [(n,proc)] --proc is a function to be called when calling this procedure
                         where proc obdd vs = ceval c obdd (msetE (zip ns vs) env)



